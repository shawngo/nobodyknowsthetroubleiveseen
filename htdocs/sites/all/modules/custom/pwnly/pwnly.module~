<?php
// $Id$
/**
 * @file
 * Password Only module
 */

/**
 * Implementation of hook_init()
 *
 * Used to disable caching on the login and protected pages
 */
function pwnly_init() {
  $debugr = $_SERVER['REMOTE_ADDR'] == '71.90.4.90';
  $request_uri = request_uri();
  $pwnly_base_url = variable_get('pwnly_base_url', 'portal');

  // if the user is logging out, we shouldn't care here
  /*
  if (preg_match('/^\/'. $pwnly_base_url .'\/logout/')) {
    pwnly_logout_pwnly();
    exit;
  }
  */

  $uncacheables = array('/portal', '/portal/profitable-sustainability-initiative');
  $in_portal = preg_match('/^\/'. $pwnly_base_url .'\//', $request_uri) && !preg_match('/^\/'. $pwnly_base_url .'\/logout/', $request_uri);

  if ($debugr) {
  //  echo 'wmep1 '. $pwnly_base_url .' -- '. ($in_portal ? 'tr' : 'fa');
  }

  if ($in_portal && !pwnly_access()) {
    drupal_set_message('You must be logged in to view this content');
    pwnly_logout_pwnly();//drupal_goto($pwnly_base_url, array('query' => array('destination' => $request_uri)));
  }

  // disable caching for the cacheable pages
  if ($in_portal || in_array($request_uri, $uncacheables)) {
    $GLOBALS['conf']['cache'] = FALSE;
  }
}



/**
 * Implementation of hook_menu().
 */
function pwnly_menu() {
  $items = array();
  $items['admin/settings/pwnly'] = array(
    'title' => 'Passowrd only module settings',
    'description' => 'Password only module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pwnly_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

/*  $items['portal/profitable-sustainability-initiative'] = array(
    'title' => t('Portal page'),
    'description' => 'Portal page',
    'page callback' => 'pwnly_portal_page',
    'access callback' => 'pwnly_access',
    'type' => MENU_CALLBACK,
  );
*/

  $items['portal'] = array(
    'title' => t('Application login'),
    'description' => 'Login for application users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pwnly_login'),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $pwnly_base_url = variable_get('pwnly_base_url', '');
  if ($pwnly_base_url != '') {
    $items[$pwnly_base_url] = array(
      'title' => t('Application login'),
      'description' => 'Login for application users',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pwnly_login'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }

  $items['portal/logout'] = array(
    'title' => t('Log out'),
    'page callback' => 'pwnly_logout_pwnly',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Password only access callback
 */
function pwnly_access() {
  global $user;
  if ($user->uid == 1) return TRUE;
  if (in_array('client admin', $user->roles)) return TRUE;
  if (in_array('applicant', $user->roles)) return TRUE;

  return $_SESSION['pwnly_login'] == 'pwnly_allowed';
}


/**
 * Page callback for portal login page
 */
function pwnly_login(&$form_state) {

  // if the user is accessing the login page but is already logged in,
  // send them over to the intended page.
  $pwnly_base_url = variable_get('pwnly_base_url', 'portal');
  $pwnly_login_redirect = variable_get('pwnly_login_redirect', 'not-set');
  if (FALSE && pwnly_access()) {
    drupal_goto($pwnly_base_url .'/'. $pwnly_login_redirect);
  }

  drupal_set_title(variable_get('pwnly_login_page_title', 'Application Login'));

  // this is the login form on /portal
  $form = array();
  $form['password'] = array(
    '#type' => 'password',
    '#title' => variable_get('pwnly_password_title', 'Application password'),
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => variable_get('pwnly_password_description', 'Enter your application password'),
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  return $form;

}

/**
 * Page callback for portal/login
 */
function pwnly_logout(&$form_state) {
  // basic log out form
  $form = array();
  $form['submit'] = array('#type' => 'submit', '#value' => t('Log Out'));
  return $form;

}

/**
 * login validation form
 */
function pwnly_login_validate($form, &$form_state) {
  // if password is blank or is not = pwnly_password, deny
  if ($form_state['values']['password'] == '' || $form_state['values']['password'] != variable_get('pwnly_password', '')) {
    form_set_error('password', t('You must enter a valid password'));
    $_SESSION['pwnly_login'] = '';
  }
  // user has correct credential, send to survey page
  else {
    $_SESSION['pwnly_login'] = 'pwnly_allowed';
    drupal_goto(variable_get('pwnly_base_url', 'portal') .'/'. variable_get('pwnly_login_redirect', 'not-set'));
    //drupal_goto('user');
  }
}

/**
 * callback for the survey page
 *
 * optionally this can be used to set up a page with a view and the logout form
 */
function pwnly_portal_page() {
  // add the logout form and the downloads view

  drupal_set_title(variable_get('pwnly_download_page_title', ''));

  $logout_form = drupal_get_form('pwnly_logout');
  $view_id = '';
  //$content = views_embed_view($view_id);

  return '<div style="float: right;">'. $logout_form .'</div>' . $content;
}

/**
 * logout submit callback
 */
function pwnly_logout_submit($form, &$form_state) {
  pwnly_logout_pwnly();
}

/**
 * function pwnly_logout_pwnly()
 *
 * logs the pwnly user out (kills session)
 */
function pwnly_logout_pwnly() {
  // clear the session variable and send the user to the login page
  $_SESSION['pwnly_login'] = '';
  unset($_SESSION['pwnly_login']);
  session_destroy();
  drupal_goto('portal');
  exit;
}

/**
 * Implementation of hook_admin_settings() for configuring the module
 */
function pwnly_admin_settings_form(&$form_state) {
  // allow the admin to update the password
  $form = array();

  $form['pwnly']['pw_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => 'Password field',
  );

  $form['pwnly']['pw_fieldset']['pwnly_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the password for users'),
    '#default_value' => variable_get('pwnly_password', ''),
    '#description' => t('This is the password to be used by application users')
  );


  $form['pwnly']['pw_fieldset']['pwnly_password_title'] = array(
    '#type' => 'textfield',
    '#title' => 'Password field title',
    '#default_value' => variable_get('pwnly_password_title', 'Application password'),
    '#description' => t('This is the title above the password field on the login page')
  );

  $form['pwnly']['pw_fieldset']['pwnly_password_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Password field description'),
    '#default_value' => variable_get('pwnly_password_description', 'Enter your application password'),
    '#description' => t('Help text placed underneath the password field on the login page')
  );


  $form['pwnly']['page_titles'] = array(
    '#type' => 'fieldset',
    '#title' => 'Page titles',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['pwnly']['page_titles']['pwnly_login_page_title'] = array(
    '#type' => 'textfield',
    '#title' => 'Password page title',
    '#default_value' => variable_get('pwnly_login_page_title', 'Application Login'),
    '#description' => t('This is the page title on the login page')
  );

  $form['pwnly']['page_titles']['pwnly_download_page_title'] = array(
    '#type' => 'textfield',
    '#title' => 'Application page title',
    '#default_value' => variable_get('pwnly_download_page_title', ''),
    '#description' => t('This is the page title on the download page')
  );


  $form['pwnly']['url_settings'] = array(
    '#type' => 'fieldset',
    '#title' => 'URL settings',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['pwnly']['url_settings']['pwnly_base_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Pwnly base URL',
    '#default_value' => variable_get('pwnly_base_url', ''),
    '#description' => t('This is the base URL or starting point. Upon hitting this URL, users will be redirected to the login page if they have not logged in already. Otherwise, they will either be presented with a page or redirected to the protected URL.')
  );

  $form['pwnly']['url_settings']['pwnly_login_redirect'] = array(
    '#type' => 'textfield',
    '#title' => 'Login redirect URL',
    '#default_value' => variable_get('pwnly_login_redirect', ''),
    '#description' => t('This is the the user is redirected to after login')
  );

  return system_settings_form($form);
}


